 1:什么是线程？
    线程是操作系统能够进行运算调度的最小单位，它被包含在进程之中，是进程中的实际运作单位。
    程序员可以通过它进行多处理器编程，你可以使用多线程对运算密集型任务提速。
    比如，如果一个线程完成一个任务要100毫秒，那么用十个线程完成改任务只需10毫秒。
2 线程和进程有什么区别
    线程是进程的子集，一个进程可以有很多线程，每条线程并行执行不同的任务。
    不同的进程使用不同的内存空间，而所有的线程共享一片相同的内存空间。
    别把它和栈内存搞混，每个线程都拥有单独的栈内存用来存储本地数据。
3 如何在 Java 中使用新线程
     在语言层面有两种方式。java.lang.Thread 类的实例就是一个线程但是它需要调用java.lang.Runnable接口来执行，
     由于线程类本身就是调用的Runnable接口所以你可以继承java.lang.Thread 类或者直接调用Runnable接口来重写run()方法实现线程
4 start() 和 run() 有什么区别
    start()方法被用来启动新创建的线程，而且start()内部调用了run()方法，这和直接调用run()方法的效果不一样。
    当你调用run()方法的时候，只会是在原来的线程中调用，没有新的线程启动，start()方法才会启动新线程。
5 Thread.join 方法有什么用
    join方法顾名思义 就是往线程中添加东西的；join方法可以用于临时加入线程，一个线程在运算过程中，
    如果满足于条件，我们可以临时加入一个线程，让这个线程运算完，另外一个线程再继续运行。
6 假如新建T1、T2、T3三个线程，如何保证它们按顺序执行？
    在多线程中有多种方法让线程按特定顺序执行，你可以用线程类的join()方法在一个线程中启动另一个线程，另外一个线程完成该线程继续执行。
    为了确保三个线程的顺序你应该先启动最后一个(T3调用T2，T2调用T1)，这样T1就会先完成而T3最后完成。
7 volatile 变量是做什么的
    volatile是一个特殊的修饰符，只有成员变量才能使用它。在Java并发程序缺少同步类的情况下，多线程对成员变量的操作对其它线程是透明的。
    volatile变量可以保证下一个读取操作会在前一个写操作之后发生，就是上一题的volatile变量规则。
8 如果一个线程中发生了异常会怎么样
    简单的说，如果异常没有被捕获该线程将会停止执行。Thread.UncaughtExceptionHandler是用于处理未捕获异常造成线程突然中断情况的一个内嵌接口。
    当一个未捕获异常将造成线程中断的时候JVM会使用Thread.getUncaughtExceptionHandler()来查询线程的UncaughtExceptionHandler并将线程和异常
    作为参数传递给handler的uncaughtException()方法进行处理。
9 什么是 ThreadLocal 变量
     ThreadLocal是Java里一种特殊的变量。每个线程都有一个ThreadLocal就是每个线程都拥有了自己独立的一个变量，竞争条件被彻底消除了。
     它是为创建代价高昂的对象获取线程安全的好方法，比如你可以用ThreadLocal让SimpleDateFormat变成线程安全的，
     因为那个类创建代价高昂且每次调用都需要创建不同的实例所以不值得在局部范围使用它，如果为每个线程提供一个自己独有的变量拷贝，
     将大大提高效率。首先，通过复用减少了代价高昂的对象的创建个数。其次，你在没有使用高代价的同步或者不变性的情况下获得了线程安全。
     线程局部变量的另一个不错的例子是ThreadLocalRandom类，它在多线程环境中减少了创建代价高昂的Random对象的个数。
10 什么是线程池，为什么要使用
    创建线程要花费昂贵的资源和时间，如果任务来了才创建线程那么响应时间会变长，而且一个进程能创建的线程数有限。
    为了避免这些问题，在程序启动的时候就创建若干线程来响应处理，它们被称为线程池，里面的线程叫工作线程。
    从JDK1.5开始，Java API提供了Executor框架让你可以创建不同的线程池。比如单线程池，每次处理一个任务；
    数目固定的线程池或者是缓存线程池（一个适合很多生存期短的任务的程序的可扩展线程池）
11 Thread.sleep 和 wait 方法有什么不同
    Java程序中wait 和 sleep都会造成某种形式的暂停，它们可以满足不同的需要。wait()方法用于线程间通信，
    如果等待条件为真且其它线程被唤醒时它会释放锁，而sleep()方法仅仅释放CPU资源或者让当前线程停止执行一段时间，但不会释放锁。
12 synchronized 关键词是做什么的
    1）是某个对象实例内，synchronized aMethod(){}可以防止多个线程同时访问这个对象的synchronized方法（如果一个对象有多个synchronized方法，
    只要一个线程访问了其中的一个synchronized方法，其它线程不能同时访问这个对象中任何一个synchronized方法）。
    这时，不同的对象实例的 synchronized方法是不相干扰的。也就是说，其它线程照样可以同时访问相同类的另一个对象实例中的synchronized方法；
    2）是某个类的范围，synchronized static aStaticMethod{}防止多个线程同时访问这个类中的synchronized static 方法。它可以对类的所有对象实例起作用。
单例模式
    Java中单例模式定义：“一个类有且仅有一个实例，并且自行实例化向整个系统提供。”
    单例模式是设计模式中最简单的形式之一。这一模式的目的是使得类的一个对象成为系统中的唯一实例。要实现这一点，可以从客户端对其进行实例化开始。
    因此需要用一种只允许生成对象类的唯一实例的机制，“阻止”所有想要生成对象的访问。
    使用工厂方法来限制实例化过程。这个方法应该是静态方法（类方法），因为让类的实例去生成另一个唯一实例毫无意义。